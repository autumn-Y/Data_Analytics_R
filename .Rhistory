q()
source("C:/Users/nykon/Desktop/나영이/학기/Data Analytics/R script/CH2_EX.R")
rm(list=ls()) # Removes all objects (datasets variables, etc.) from the environment
"hello world"
print("hellow world")
10+5
16-6
3*5
9/4
8:10
install.packages("caret")
test.rows <- setdiff(row.names(toyota.df), union(valid.rows, train.rows))
train.data <- toyota.df[train.rows, ]
valid.data <- toyota.df[valid.rows, ]
#6)	Use the interface  to load the data set WestRoxbury.csv and assign the name housing.df for this data frame.
housing.df <- read.csv("C:/Users/nykon/Desktop/data/WestRoxbury.csv")
#6)	Use the interface  to load the data set WestRoxbury.csv and assign the name housing.df for this data frame.
housing.df <- read.csv("C:/Users/nykon/Desktop/data/WestRoxbury.csv", header=TRUE)
#7)	Try out the View command: view(housing.df).
View(housing.df)
source("C:/Users/nykon/Desktop/나영이/학기/Data Analytics/R script/CH2_EX.R", encoding = 'UTF-8')
a[3]
print(a[3])
pi
sqrt(2)
print(matrix(c(1,2,3,4)2,2))
print(matrix(c(1,2,3,4),2,2))
print(list("a","b","c"))
cat("abc", "def", "ghi\n")
cat("abc", "def", 123)
print(z)
z = sqrt(x^2+y^2)
z <- sqrt(x^2+y^2)
print(z)
z <- sqrt(x^2+y^2)
x <- 3
y <- 4
z <- sqrt(x^2+y^2)
print(z)
print(z)
print(x)
print(c)
print(x)
ls()
ls.str()
x
x
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", echo=TRUE)
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", echo=TRUE)
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", echo=TRUE)
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", echo=TRUE)
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", echo=TRUE)
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", echo=TRUE)
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", echo=TRUE)
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", echo=TRUE)
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", echo=TRUE)
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", echo=TRUE)
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", echo=TRUE)
rm(list=ls())
options(scipen=999)
RNGkind(sample.kind="Rounding")
setwd("C:/Users/nykon/Desktop/나영이/#Data Analytics/workplace")
housing.df <- read.csv("C:/Users/nykon/Desktop/나영이/#Data Analytics/data/WestRoxbury.csv", header=TRUE)
# Try out the View command: view(housing.df)
view(housing.df)
# Try out the View command: view(housing.df)
View(housing.df)
set.seed(5)
sample(c(1:100),3)
sample(c(1:100),3)
set.seed(5)
sample(c(1:100),3)
set.seed(5)
sample(c(1:100),3)
library(scales)
age_norm <- rescale(age, to=c(0,1))
income_norm <- resclae(income)
age_std <- scale(age, center=TRUE, scale=TRUE)
income_std <- scale(income, center=TRUE, scale=TRUE)
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", encoding = 'UTF-8', echo=TRUE)
housing.df <- read.csv("C:/Users/nykon/Desktop/나영이/#Data Analytics/data/ToyotaCorolla.csv", header=TRUE)
toyota.df <- read.csv("C:/Users/nykon/Desktop/나영이/#Data Analytics/data/ToyotaCorolla.csv", header=TRUE)
housing.df <- read.csv("C:/Users/nykon/Desktop/나영이/#Data Analytics/data/WestRoxbury.csv", header=TRUE)
library(dummies)
toyota.df.Fuel.Type <- dummy(toyota.df$Fuel_Type)
toyota.df.Color <- dummy(toyota.df$Color)
View(toyota.df.Color)
View(toyota.df.Fuel.Type)
set.seed(7)
train.rows <- sample(rownames(toyota.df), dim(toyota.df)[1]*0.5)
valid.rows <- sample(setdiff(rownames(toyota.df), train.df), dim(toyota.df)[1]*0.3)
test.rows <- setdiff(row.names(toyota.df), union(train.rows, valid.rows))
set.seed(7)
train.rows <- sample(rownames(toyota.df), dim(toyota.df)[1]*0.5)
valid.rows <- sample(setdiff(rownames(toyota.df), train.rows), dim(toyota.df)[1]*0.3)
test.rows <- setdiff(row.names(toyota.df), union(train.rows, valid.rows))
setwd("C:/Users/nykon/Desktop/나영이/#Data Analytics/workplace")
owner.df <- read.csv("C:/Users/nykon/Desktop/나영이/#Data Analytics/data/ownerExample.csv")
rm(list=ls())
options(scipen = 999)
RNGkind(sample.kind = "Rounding")
setwd("C:/Users/nykon/Desktop/나영이/#Data Analytics/workplace")
owner.df <- read.csv("C:/Users/nykon/Desktop/나영이/#Data Analytics/data/ownerExample.csv")
library(caret)
#accuracy, misclassification rate, specificity, sensitivity
confusionMatrix(
table(ifelse(owner.df$Probability > 0.5, 'owner', 'nonowner'), owner.df$Class),
positive = 'owner'
)
for(i in c(0.25, 0.5, 0.75)) {
print(confusionMatrix(
table(ifelse(owner.df$Probability > i, 'owner', 'nonowner'), owner.df$class),
positive = 'owner'
))
}
for(i in c(0.25, 0.5, 0.75)) {
print(confusionMatrix(
table(ifelse(owner.df$Probability > i, 'owner', 'nonowner'), owner.df$Class),
positive = 'owner'
))
}
library(pROC)
owner.df$Class <- relevel(owner.df$Class, ref="owner")
owner.df$Class <- as.factor(owner.df$Class)
owner.df$Class <- relevel(owner.df$Class, ref="owner")
View(owner.df)
r <- roc(owner.df$Class, owner.df$Probability)
plot.roc(r)
auc(r)
r <- roc(owner.df$Class, runif(24), direction = ">")
auc(r)
coin.toss.auc <- c()
for(i in 1000) {
r <- roc(owner.df$Class, runif(24), direction = ">")
coin.toss.auc[i] <- auc(r)
}
mean(coin.toss.auc)
coin.toss.auc <- c()
for(i in 1000) {
r <- roc(owner.df$Class, runif(24), direction = ">")
coin.toss.auc[i] <- auc(r)
}
mean(coin.toss.auc)
lift.df <- read.csv("C:/Users/nykon/Desktop/나영이/#Data Analytics/data/liftExample.csv")
lift.example <- lift(relevel(as.factor(actual), ref="1") ~ prob, data=lift.df)
xyplot(lift.example, plot='gain')
library(gains)
gain <- gains(lift.df$actual, lift.df$prob, groups=4)
parplot(gain$main.resp/mean(lift.df$actual),
names.arg=gain$depth,
xlab = "Depth of File",
ylab = "Mean Response",
main = "Decile-wise lift chart")
barplot(gain$main.resp/mean(lift.df$actual),
names.arg=gain$depth,
xlab = "Depth of File",
ylab = "Mean Response",
main = "Decile-wise lift chart")
library(gains)
gain <- gains(lift.df$actual, lift.df$prob, groups=4)
barplot(gain$main.resp/mean(lift.df$actual),
names.arg = gain$depth,
xlab = "Depth of File",
ylab = "Mean Response",
main = "Decile-wise lift chart")
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", encoding = 'UTF-8', echo=TRUE)
barplot(gain$mean.resp/mean(lift.df$actual),
names.arg = gain$depth,
xlab = "Depth of File",
ylab = "Mean Response",
main = "Decile-wise lift chart")
mean.resp <- gain$mean.resp/mean(lift.df$actual)
gain_gg.df <- data.frame(mean_resp)
gain_Gg.df$depth <- gain$depth
mean_resp <- gain$mean.resp/mean(lift.df$actual)
gain_gg.df <- data.frame(mean_resp)
gain_Gg.df$depth <- gain$depth
gain_gg.df$depth <- gain$depth
ggplot(gain_gg.df, aes(y=mean_resp, x=depth)) +
geom_bar(stat='identity', fill="pink", alpha=0.7)
source("C:/Users/nykon/Desktop/나영이/WorkSpace/R/practice.R", encoding = 'UTF-8', echo=TRUE)
rm(list=ls())
options(scipen = 999)
RNGkind(sample.kind = "Rounding")
setwd("C:/Users/nykon/Desktop/나영이/#Data Analytics/workplace")
df <- read.csv("C:/Users/nykon/Desktop/나영이/#Data Analytics/data/ToyotaCorolla.csv")
colnames(df) <- tolower(colnames(df))
df <- subset(df, select=c("price", "fuel_type", "km", "hp"))
df$fuel_type = tolower(df$fuel_type)
df <- read.csv("C:/Users/nykon/Desktop/나영이/#Data Analytics/data/ToyotaCorolla.csv")
colnames(df) <- tolower(colnames(df))
df <- subset(df, select=c("price", "fuel_type", "km", "hp"))
df$fuel_type = tolower(df$fuel_type)
table(df$fuel_type)
mean(df$price[df$fuel_type=="cng"])
library(ggplot2)
ggplot(df, aex(y=df$price, x=df$fuel_type)) +
geom_boxplot()
ggplot(df, aes(y=df$price, x=df$fuel_type)) +
geom_boxplot()
summary(df)
model1 <- lm(price ~ fuel_type, data=df)
summary(model1)
lm(price ~ fuel_type, data=df)
lm(price ~ ., data=df)
df <- read.csv("C:/Users/nykon/Desktop/나영이/#Data Analytics/data/UniversalBank.csv")
colnames(df) <- tolower(colnames(df))
df <- subset(df, select = c(income, family, mortgage))
df$has.mortgage <- ifelse(df$mortgage>0, 1, 0)
decribe(df)
describe(df)
library(tidyverse)
library(Hmisc)
library(gains)
ilbrary(caret)
describe(df)
df<-subset(df, select=-c(mortgage))
set.seed(2)
train.index <- sample(c(1:dim(df)[1], dim(df)[1]*0.6))
train.df <- df[train.index, ]
valid.df <- df[-train.index, ]
logit <- glm(has.mortgage ~ ., data=train.df, family="bionomal")
logit <- glm(has.mortgage ~ ., data=train.df, family="binomal")
logit <- glm(has.mortgage ~ ., data=train.df, family="binomial")
sumurry(logit)
summury(logit)
summary(logit)
logit.pred <- predict(logit, valid.df, type="response")
describe(logit.pred)
train.index <- sample(c(1:dim(df)[1], dim(df)[1]*0.6))
train.df <- df[train.index, ]
valid.df <- df[-train.index, ]
train.index <- sample(c(1:dim(df)[1]), dim(df)[1]*0.6)
train.df <- df[train.index, ]
valid.df <- df[-train.index, ]
logit <- glm(has.mortgage ~ ., data=train.df, family="binomial")
summary(logit)
logit.pred <- predict(logit, valid.df, type="response")
describe(logit.pred)
gain <- gains(valid.df$has.mortgage, logit.pred, groups = 10)
heights <- gain$main.resp/mean(valid.df$has.mortgage)
midpoints <- barplot(heights,
names.arg = gain$depth,
ylim = c(0.2),
xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart")
gain <- gains(valid.df$has.mortgage, logit.pred, groups = 10)
heights <- gain$main.resp/mean(valid.df$has.mortgage)
midpoints <- barplot(heights,
names.arg = gain$depth,
ylim = c(0.2),
xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart")
gain <- gains(valid.df$has.mortgage, logit.pred, groups = 10)
heights <- gain$main.resp/mean(valid.df$has.mortgage)
midpoints <- barplot(heights,
names.arg = gain$depth,
ylim = c(0,2),
xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart")
heights <- gain$mean.resp/mean(valid.df$has.mortgage)
midpoints <- barplot(heights,
names.arg = gain$depth,
ylim = c(0,2),
xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart")
confusionMatrix(as.factor(ifelse(logit.pred>0.3, 1, 0)), as.factor(valid.df$has.mortgage), positive="1")
